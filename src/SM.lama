-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

fun p(some) {
  system (sprintf("echo '%s' >&2", string(some)))
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal (st, nargs, nlocals) { 
    case take (st, nargs) of
      [_, st] -> 
        case makeState(nargs, nlocals) of
          [args, locals] -> 
            foldl(fun (i, z) { 
              args[i] := z;
              i - 1
            }, nargs - 1, st);
            for var i; i := 0, i < nargs, i := i + 1 do args[i] := st[nargs - i - 1] od;
            [st, [args, locals]]
        esac
    esac
  }

  fun p(some) {
   system (sprintf("echo '%s' >&2", string(some)))
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    p("eval SM is called");
    case insns of 
      {} -> c
    | _  -> 
      case evalInstruction (c, insns) of 
        [st, cst, s, w, rest] -> eval ([st, cst, s, w], rest)
      esac
    esac
  }

  fun evalInstruction([st, cst, s, w], instruction:rest) { 
    p(instruction);
    case instruction of 
      BINOP (op) -> p("binop"); case st of y:x:st -> [evalOp(op, x, y):st, cst, s, w, rest] esac
    | CONST (z) -> p("const"); [z:st, cst, s, w, rest]
    | READ -> case readWorld (w) of [z, w] -> [z:st, cst, s, w, rest] esac
    | WRITE -> case st of z:st -> [st, cst, s, writeWorld(z, w), rest] esac
    | DROP -> case st of z:st -> [st, cst, s, w, rest] esac
    | LD (x) -> [lookup(s, x):st, cst, s, w, rest]
    | LDA (x) -> [Ref (x):st, cst, s, w, rest]
    | STI -> case st of z : Ref (x) : st -> p(s); assign(s, x, z); [z:st, cst, s, w, rest] esac
    | ST (x) -> p("stx"); p(s); case st of z:st -> p("stx end"); assign(s, x, z); [z:st, cst, s, w, rest] esac
    | LABEL (l) -> [st, cst, s, w, rest]
    | JMP (l) -> [st, cst, s, w, env.fromLabel (l)]
    | CJMP (c, l) -> 
      case c of 
        "z"  -> case st of z:st -> [st, cst, s, w, if z == 0 then env.fromLabel(l) else rest fi] esac
      | "nz" -> case st of z:st -> [st, cst, s, w, if z != 0 then env.fromLabel(l) else rest fi] esac
      esac
    | END -> 
      p("End");
      case cst of
        {} -> [st, cst, s, w, {}]
      | [sl, q] : cst -> case s of [_, s] -> [st, cst, [sl, s], w, q] esac
      esac
    | BEGIN (_, nargs, nlocals) ->
      p("Begin");
      case createLocal (st, nargs, nlocals) of
        [st, sl] -> case s of [_, s] -> [st, cst, [sl, s], w, rest] esac
      esac
    | CALL (f, _) -> p("Call"); [st, [s, rest]:cst, s, w, env.fromLabel(f)]
    | GLOBAL (x) -> p("Global"); [st, cst, s, w, rest]
    esac
  }
    (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    p ("getLocals");
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun appendCode (env, e, ins) {
    case env.genLabel of 
      [eLab, env] ->
        case compile (eLab, env, e) of
          [labUsed, env, code] -> [false, env, code <+> label (eLab, labUsed) <+> singletonBuffer (ins)]
        esac
    esac
  }

  fun genGlobal (vars) {
    foldl (fun (code, aVar) { code <+ GLOBAL (aVar) }, emptyBuffer(), vars)
  }

  fun traverseDefs1 (env, defs) { 
    p("defs tr1");
    foldl (fun ([code, env, funcs], def) { 
      case def of 
        Var (vars) -> 
          [if isGlobal (env) then code <+> genGlobal (vars) else code fi, addVars (env, vars), funcs]
      | func@(Fun (f, args, e)) -> 
          case genFunLabel (env, f) of 
            [label, env] -> [code, addFun (env, f, label, size (args)), func : funcs]
          esac
      esac
    }, [emptyBuffer (), env, {}], defs)
  }
  fun traverseDefs2 (env, funcs) { 
    p("defs tr2");
    foldl (fun (env, Fun (f, args, e)) { 
      rememberFun (env, f, args, e)
    }, env, funcs)
  }

  fun compileMany (env, exprs) { 
    foldl (fun ([env, codeOld], expr) { 
      case genLabel(env) of
        [lab, env] -> 
          case compile (lab, env, expr) of
            [used, env, code] -> [env, codeOld <+> code <+> label (lab, used)]
          esac
      esac
    }, [env, emptyBuffer ()], exprs)
  }

  fun compile (lab, env, stmt) {
    p ("compiling stmt"); p(stmt);
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Var   (x)      -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref   (x)      -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const (n)      -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x))]
    | Write (e)          -> appendCode (env, e, WRITE)
    | Assn  (Var (x), e) -> p("assn 1"); appendCode (env, e, ST (lookupVar (env, x)))
    | Assn  (x, e)       -> p("assn 2"); appendCode (env, Seq(x, e), STI)
    | Ignore (e)         -> p("Ignore"); appendCode (env, e, DROP)
    | Binop (op, e1, e2) -> appendCode (env, Seq(e1, e2), BINOP (op))
    | Seq   (s1, s2) ->
      case genLabel (env) of
        [s2Lab, env] ->
          case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] ->
              case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
              esac
          esac
      esac
    | Scope (defs, e) ->
      p("scope");
      case traverseDefs1 (beginScope (env), defs) of 
        [defsCode, env, funcs] -> 
          case compile (lab, traverseDefs2 (env, funcs), e) of 
            [flag, env, code] -> p("end"); [flag, endScope (env), defsCode <+> code]
          esac
      esac
    | Call (f, exprs) ->
      p("call");
      case compileMany (env, exprs) of
        [env, code] -> 
          case lookupFun (env, f) of 
            Fun (label, _) -> [false, env, code <+> JMP (label)]
          esac
      esac
    | If (e, s1, s2) ->
      case genLabels(env, 3) of 
        [eLabel, s1Label, elseLabel, env] -> 
          case compile (eLabel, env, e) of
            [eLabelUsed, env, eCode] ->
              case compile (s1Label, env, s1) of
                [s1LabelUsed, env, s1Code] -> 
                  case compile (lab, env, s2) of
                    [_, env, s2Code] -> [
                      true, env, 
                      eCode <+> label (eLabel, eLabelUsed) <+> singletonBuffer (CJMP("z", elseLabel)) 
                        <+> s1Code <+> label (s1Label, s1LabelUsed) 
                        <+> listBuffer ({JMP(lab), LABEL (elseLabel)}) <+> s2Code
                    ]
                  esac
              esac
          esac
      esac
    | While (e, s) -> 
      case genLabels(env, 2) of
        [sStartLabel, sEndLabel, env] -> 
          case appendCode (env, e, CJMP ("nz", sStartLabel)) of
            [_, env, eCode] -> 
              case compile (sEndLabel, env, s) of
                [_, env, code] -> [
                  false, env, 
                  listBuffer ({JMP (sEndLabel), LABEL(sStartLabel)}) <+> code
                    <+> singletonBuffer (LABEL (sEndLabel)) <+> eCode
                ]
              esac
          esac
      esac
    | DoWhile (s, e) ->
      case genLabels(env, 2) of
        [sStartLabel, sEndLabel, env] ->
          case appendCode (env, e, CJMP ("nz", sStartLabel)) of
            [_, env, eCode] ->
              case compile (sEndLabel, env, s) of
                [endLabelUsed, env, code] -> [ 
                  false, env,
                  singletonBuffer (LABEL (sStartLabel)) <+> code
                    <+> label (sEndLabel, endLabelUsed) <+> eCode
                ]
              esac
          esac
      esac
    esac
  }

  fun compileFuncs (env, start) { 
    fun traverse (env, funcs) { 
      p ("traverse");
      case funcs of 
        {} -> p ("empty funcs");
          case getFuns (env) of
            [{}, env]    -> p ("got empty funcs"); emptyBuffer ()
          | [funcs, env] -> p ("got funcs: "); p(funcs); traverse (env, funcs)
          esac 
      | Fun (f, args, e, s) : funcs ->
        p("in traverse case");
        case traverse (env, funcs) of
          [code, env] ->
            case appendCode (addArgs (beginFun (env, s), args), e, END) of
              [_, env, thisCode] -> p("In codegen case"); [listBuffer ({
                 LABEL (f), BEGIN (f, args.size, getLocals (env)) 
              }) <+> thisCode <+> traverse (env, funcs) ]
            esac
        esac
      esac
    }
    p ("compileFuncs");
    start <+> traverse (env, {})
  }

  p("CompileSM"); p(stmt);
  case initCompEnv ().genLabel of
    [endLab, env] ->
      p("before compile");
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] -> 
          p("in first compile");
          getBuffer $ compileFuncs (
            env, 
            singletonBuffer (LABEL ("main")) <+ BEGIN ("main", 0, getLocals (env))
              <+> code <+> label (endLab, endLabUsed) <+ END
          )
      esac
  esac
}

