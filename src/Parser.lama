-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
 }

var eOps = {
  [ Left, {
    [s ("!!"), fun (l, op, r) { Binop (op, l, r) }]
  }
  ],
  [ Left, {
    [s ("&&"), fun (l, op, r) { Binop (op, l, r) }]
  }
  ],
  [ Nona, {
    [s ("=="), fun (l, op, r) { Binop (op, l, r) }],
    [s ("!="), fun (l, op, r) { Binop (op, l, r) }],
    [s ("<="), fun (l, op, r) { Binop (op, l, r) }],
    [s (">="), fun (l, op, r) { Binop (op, l, r) }],
    [s ("<"), fun (l, op, r) { Binop (op, l, r) }],
    [s (">"), fun (l, op, r) { Binop (op, l, r) }]
  }
  ],
  [ Left, {
      [s ("+"), fun (l, op, r) { Binop (op, l, r) }], 
      [s ("-"), fun (l, op, r) { Binop (op, l, r) }]
    }
  ],
  [ Left, {
    [s ("*"), fun (l, op, r) { Binop (op, l, r) }],
    [s ("/"), fun (l, op, r) { Binop (op, l, r) }],
    [s ("%"), fun (l, op, r) { Binop (op, l, r) }] 
    }
  ]
};

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr(eOps, primary);

var seqOps = {
  [ Left, {
    [s (";"), fun (l, op, r) { Seq(l, r) }] 
  }]
};

var stmt = memo $ eta syntax ((kSkip) { Skip } |
                              x=lident s[":="] e=(exp) { Assn(x, e) } |
                              kRead s["("] x=lident s[")"] { Read(x) } |
                              kWrite s["("] e=(exp) s[")"] { Write(e) }
                            );


-- Public top-level parser
public parse = expr(seqOps, stmt);
             
