-- Statement evaluator.

import State;
import Expr;
import World;

fun parseRead(x, state, [n, nw]) { 
  [state <- [x, n], nw]
}

fun addTo(st, x, v) { 
  fun (y) {
    if compare (x, y) == 0 then v else st (y) fi
  }
}

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, w], stmt) {
  case stmt of
    Assn (x, e) -> [addTo(state, x, evalExpr(state, e)), w]
  | Seq (s1, s2) -> eval(eval(c, s1), s2)
  | Skip -> c
  | Read (x@#str) -> parseRead(x, state, readWorld(w))
  | Write (e) -> [state, writeWorld(evalExpr(state, e), w)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
