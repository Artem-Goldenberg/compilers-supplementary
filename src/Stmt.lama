-- Statement evaluator.

import State;
import Expr;
import World;

fun parseRead(x, state, [n, nw]) { 
  [state <- [x, n], nw]
}

fun addTo(st, x, v) { 
  fun (y) {
    if compare (x, y) == 0 then v else st (y) fi
  }
}

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[state, w], stmt) {
  -- case stmt of
  --   [x@#str, e] -> printf("expr: %s\n", e); [state <- [x, evalExpr(e)], w]
  -- | [s1, s2] -> printf("here\n"); eval(eval(c, s1), s2)
  -- | [] -> printf("[]\n"); c
  -- | x@#str -> printf("read\n"); parseRead(x, state, readWorld(w))
  -- | e@#fun -> printf("write\n"); [state, writeWorld(evalExpr(e), w)]
  -- esac
  case stmt of
    -- Assn (x, e) -> printf("assn: %s, %s\n", x, e); [state <- [x, evalExpr(e)], w]
    Assn (x, e) -> [addTo(state, x, evalExpr(state, e)), w]
  | Seq (s1, s2) -> eval(eval(c, s1), s2)
  | Skip -> c
  | Read (x@#str) -> parseRead(x, state, readWorld(w))
  | Write (e) -> [state, writeWorld(evalExpr(state, e), w)]
  esac
  -- failure ("Stmt eval not implemented\n")
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
