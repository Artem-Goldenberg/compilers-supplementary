-- Expression evaluator

import List;
import State;

public fun perform (op, n1, n2) { 
  case op of
    "+" ->  n1 + n2
  | "-" -> n1 - n2
  | "*" -> n1 * n2
  | "/" -> n1 / n2
  | "%" -> n1 % n2
  | "<" -> n1 < n2
  | "<=" -> n1 <= n2
  | ">" -> n1 > n2
  | ">=" -> n1 >= n2
  | "==" -> n1 == n2
  | "!=" -> n1 != n2
  | "&&" -> n1 && n2
  | "||" -> n1 !! n2
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  -- case expr of
  --   s@#str -> st(s)
  -- | n@#val -> n
  -- | [op@#str, e1, e2] -> printf("Here\n")
  -- | op@#fun -> printf("func\n")
  -- | _ -> printf("no ma\n") --op(evalExpr(e1), evalExpr(e2))
  -- esac
  -- printf("evalExpr called on %s\n", expr);
  case expr of 
    -- s@#str -> printf("some %s", s); st(s)
    Var (s) -> st(s)
  | Const (n) -> n
  | Binop (op, e1, e2) -> perform(op, evalExpr(st, e1), evalExpr(st, e2))
  esac
  -- failure ("evalExpr not implemented\n")
}
